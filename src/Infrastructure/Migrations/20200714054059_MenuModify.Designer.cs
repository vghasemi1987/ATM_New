// <auto-generated />
using System;
using Infrastructure.Data.Commons;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AtmContext))]
    [Migration("20200714054059_MenuModify")]
    partial class MenuModify
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DomainEntities.ATMUnknownTransactionsAggregate.ATMUnknownTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ATM")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("ATMAtletCode")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<int?>("ATMDailyJournalTransactionsID");

                    b.Property<bool?>("ATMHasJournal");

                    b.Property<int?>("ATMID");

                    b.Property<int?>("ATMUnkhownTransactionDailyStatusID");

                    b.Property<int?>("ATMUnknownTransactionsID");

                    b.Property<bool?>("AfterCutover");

                    b.Property<string>("Branch")
                        .HasMaxLength(200)
                        .IsUnicode(true);

                    b.Property<string>("BranchCode")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<int?>("BranchID");

                    b.Property<string>("CardNumber")
                        .HasMaxLength(25)
                        .IsUnicode(true);

                    b.Property<string>("CardType")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("DailyConflictID");

                    b.Property<DateTime>("DeterminationDate");

                    b.Property<bool?>("IsManually");

                    b.Property<DateTime>("ManualResolveDate");

                    b.Property<string>("MaskCardNumber")
                        .HasMaxLength(30)
                        .IsUnicode(true);

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int?>("StatusID");

                    b.Property<short?>("StatusWorkfollowId");

                    b.Property<int?>("SuccessfullTransactionID");

                    b.Property<int?>("TransactionAmount");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<string>("TransactionDateShamsi")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.Property<string>("TransactionDateShamsi2")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.Property<string>("TransactionTime")
                        .HasMaxLength(10)
                        .IsUnicode(true);

                    b.Property<string>("UserDescription")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("StatusWorkfollowId");

                    b.ToTable("ATMUnknownTransactions");
                });

            modelBuilder.Entity("DomainEntities.ATMUnknownTransactionsAggregate.WorkfollowATMUnknownTransactions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ATMUnknownTransactionsId");

                    b.Property<short?>("StatusId");

                    b.Property<DateTime>("UpdateDateTime");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ATMUnknownTransactionsId");

                    b.HasIndex("StatusId");

                    b.ToTable("ATMUnknownTransactions_Workfollow");
                });

            modelBuilder.Entity("DomainEntities.AccountAggregate.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AccountNo")
                        .HasMaxLength(20);

                    b.Property<int?>("BranchId")
                        .HasMaxLength(5);

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Common_Accounts");
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("PanelMenu");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("ApplicationUser_Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "15d0ff7d-57e4-43cc-a3bd-7c87d7b9be7d",
                            Name = "توسعه دهنده",
                            NormalizedName = "توسعه دهنده",
                            PanelMenu = "[{\"Text\":\"خانه\",\"Link\":\"/home\",\"Icon\":\"flaticon-line-graph\",\"Items\":null},{\"Text\":\"مدیریت کاربران\",\"Link\":\"/usermanagement\",\"Icon\":\"flaticon-piggy-bank\",\"Items\":null},{\"Text\":\"فایل تراکنش ها\",\"Link\":\"/transactions\",\"Icon\":\"flaticon-signs-2\",\"Items\":null},{\"Text\":\"لیست تراکنش ها\",\"Link\":\"/transactiondetails\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"تمامی تراکنش ها\",\"Link\":\"/transactions/all\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"سند برداشت تجمعی\",\"Link\":\"/transactiondetails/branchtransaction\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"تراکنش های فزونی\",\"Link\":\"/transactiondetails/shetabi\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"لیست شعبه ها\",\"Link\":\"/branches\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"وظایف\",\"Link\":null,\"Icon\":\"flaticon-list-3\",\"Items\":[{\"Text\":\"تمامی وظایف\",\"Link\":\"/todotask\",\"Icon\":null,\"Items\":null},{\"Text\":\"وظایف من\",\"Link\":\"/todotask?AssignedToUserId=1&oper=And&ToDoTaskStateId=1&ToDoTaskStateId=2&ToDoTaskStateId=4\",\"Icon\":null,\"Items\":null},{\"Text\":\"وظایف بازگشتی\",\"Link\":\"/todotask?CreatorUserId=1&oper=and&ToDoTaskStateId=4\",\"Icon\":null,\"Items\":null},{\"Text\":\"وظایف انجام شده من\",\"Link\":\"/todotask?AssignedToUserId=1&oper=and&ToDoTaskStateId=3\",\"Icon\":null,\"Items\":null},{\"Text\":\"وظایف تعریف شده توسط من\",\"Link\":\"/todotask?CreatorUserId=1&oper=and\",\"Icon\":null,\"Items\":null},{\"Text\":\"جستجوی پیشرفته\",\"Link\":\"/todotask/search\",\"Icon\":null,\"Items\":null}]},{\"Text\":\"گزارشات\",\"Link\":\"/reports\",\"Icon\":\"flaticon-diagram\",\"Items\":null},{\"Text\":\"تنظیمات\",\"Link\":null,\"Icon\":\"fas fa-cogs\",\"Items\":[{\"Text\":\"پست الکترونیکی\",\"Link\":\"/setting/email\",\"Icon\":null,\"Items\":null},{\"Text\":\"سامانه\",\"Link\":\"/setting/application\",\"Icon\":null,\"Items\":null},{\"Text\":\"سطوح دسترسی\",\"Link\":\"/accessrights\",\"Icon\":null,\"Items\":null}]}]"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "a1a62ada-65d4-42ef-ac91-faf6f10ca028",
                            Name = "حسابدار",
                            NormalizedName = "حسابدار",
                            PanelMenu = "[{\"Text\":\"خانه\",\"Link\":\"/home\",\"Icon\":\"flaticon-line-graph\",\"Items\":null},{\"Text\":\"مدیریت کاربران\",\"Link\":\"/usermanagement\",\"Icon\":\"flaticon-piggy-bank\",\"Items\":null},{\"Text\":\"تراکنش ها فزونی\",\"Link\":\"\",\"Icon\":\"fas fa-sitemap\",\"Items\":[{\"Text\":\"فایل تراکنش ها\",\"Link\":\"/transactions/all\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"فرایند تراکنش ها\",\"Link\":\"/transactiondetails\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"لیست تراکنش های شعبه\",\"Link\":\"/transactiondetails/BranchDetail\",\"Icon\":\"flaticon-signs-2\",\"Items\":null}]},{\"Text\":\"سند برداشت تجمعی\",\"Link\":\"/transactiondetails/branchtransaction\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"دریافت فایل شتابی\",\"Link\":\"/transactiondetails/shetabi\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"لیست شعبه ها\",\"Link\":\"/branches\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"گزارشات\",\"Link\":\"/reports\",\"Icon\":\"flaticon-diagram\",\"Items\":null}]"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "a1a62ada-65d4-42ef-ac91-faf6f10ca027",
                            Name = "امور شعب",
                            NormalizedName = "امور شعب",
                            PanelMenu = "[{\"Text\":\"خانه\",\"Link\":\"/home\",\"Icon\":\"flaticon-line-graph\",\"Items\":null},{\"Text\":\"مدیریت کاربران\",\"Link\":\"/usermanagement\",\"Icon\":\"flaticon-piggy-bank\",\"Items\":null},{\"Text\":\"گزارشات\",\"Link\":\"/reports\",\"Icon\":\"flaticon-diagram\",\"Items\":null}]"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "a1a62ada-65d4-42ef-ac91-faf6f10ca025",
                            Name = "رئیس شعبه",
                            NormalizedName = "رئیس شعبه",
                            PanelMenu = "[{\"Text\":\"خانه\",\"Link\":\"/home\",\"Icon\":\"flaticon-line-graph\",\"Items\":null},{\"Text\":\"لیست تراکنش ها\",\"Link\":\"/transactiondetails\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"لیست تراکنش های شعبه\",\"Link\":\"/transactiondetails/BranchDetail\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"بررسی تراکنش های بلاتکلیف\",\"Link\":\"/ATMUnknown\",\"Icon\":\"flaticon-signs-2\",\"Items\":null},{\"Text\":\"تسهیلات همراه\",\"Link\":\"/HamrahLoanHeaders\",\"Icon\":\"flaticon-signs-2\",\"Items\":null},{\"Text\":\"گزارش تراکنش های بلاتکلیف\",\"Link\":\"/ATMUnknown/IndexReport\",\"Icon\":\"flaticon-signs-2\",\"Items\":null},{\"Text\":\"گزارش تسهیلات همراه\",\"Link\":\"/HamrahLoanHeaders/IndexReport\",\"Icon\":\"flaticon-signs-2\",\"Items\":null},{\"Text\":\"گزارشات\",\"Link\":\"/reports\",\"Icon\":\"flaticon-diagram\",\"Items\":null}]"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "15d0ff7d-57e4-43cc-a3bd-7c87d7b9be7d",
                            Name = "متصدی",
                            NormalizedName = "متصدی",
                            PanelMenu = "[{\"Text\":\"خانه\",\"Link\":\"/home\",\"Icon\":\"flaticon-line-graph\",\"Items\":null},{\"Text\":\"فایل تراکنش ها\",\"Link\":\"/transactions\",\"Icon\":\"flaticon-signs-2\",\"Items\":null},{\"Text\":\"لیست تراکنش های شعبه\",\"Link\":\"/transactiondetails/BranchDetail\",\"Icon\":\"fas fa-sitemap\",\"Items\":null},{\"Text\":\"بررسی تراکنش های بلاتکلیف\",\"Link\":\"/ATMUnknown\",\"Icon\":\"flaticon-signs-2\",\"Items\":null},{\"Text\":\"تسهیلات همراه\",\"Link\":\"/HamrahLoanHeaders\",\"Icon\":\"flaticon-signs-2\",\"Items\":null},{\"Text\":\"گزارش تراکنش های بلاتکلیف\",\"Link\":\"/ATMUnknown/IndexReport\",\"Icon\":\"flaticon-signs-2\",\"Items\":null},{\"Text\":\"گزارش تسهیلات همراه\",\"Link\":\"/HamrahLoanHeaders/IndexReport\",\"Icon\":\"flaticon-signs-2\",\"Items\":null},{\"Text\":\"گزارشات\",\"Link\":\"/reports\",\"Icon\":\"flaticon-diagram\",\"Items\":null}]"
                        },
                        new
                        {
                            Id = 6,
                            ConcurrencyStamp = "AdminATMUnknown",
                            Name = "ادمین تراکنش های نامعلوم",
                            NormalizedName = "ادمین تراکنش های نامعلوم",
                            PanelMenu = "[{\"Text\":\"خانه\",\"Link\":\"/home\",\"Icon\":\"flaticon-line-graph\",\"Items\":null},{\"Text\":\"گزارش تراکنش های بلاتکلیف\",\"Link\":\"/ATMUnknown/IndexReport\",\"Icon\":\"flaticon-signs-2\",\"Items\":null}]"
                        },
                        new
                        {
                            Id = 7,
                            ConcurrencyStamp = "AdminHamrahLoan",
                            Name = "ادمین وام همراه",
                            NormalizedName = "ادمین وام همراه",
                            PanelMenu = "[{\"Text\":\"خانه\",\"Link\":\"/home\",\"Icon\":\"flaticon-line-graph\",\"Items\":null},{\"Text\":\"گزارش تسهیلات همراه\",\"Link\":\"/HamrahLoanHeaders/IndexReport\",\"Icon\":\"flaticon-signs-2\",\"Items\":null}]"
                        });
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("BranchHeadId");

                    b.Property<int?>("BranchId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<short?>("OrganizationalChartId");

                    b.Property<string>("PasswordHash");

                    b.Property<DateTime?>("PasswordUpdate");

                    b.Property<string>("PersonnelCode")
                        .HasMaxLength(10);

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("Picture")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<DateTime>("RegDateTime");

                    b.Property<int?>("RegisterByUserId");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BranchHeadId");

                    b.HasIndex("BranchId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RegisterByUserId");

                    b.ToTable("ApplicationUserItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0c979d1-f65e-4122-b62f-78b5b8df30da",
                            Email = "info@test.com",
                            EmailConfirmed = false,
                            FirstName = "توسعه دهنده",
                            LastName = "وب",
                            LockoutEnabled = true,
                            NormalizedEmail = "INFO@TEST.COM",
                            NormalizedUserName = "ADMIN",
                            OrganizationalChartId = (short)1,
                            PasswordHash = "AQAAAAEAACcQAAAAEFQSCRc6wVL8pu5ChTDI4xT2A5LQ2okSnHseUkzOj0SfLwNzOdHLlhSHaf+lR3jv9A==",
                            PhoneNumberConfirmed = false,
                            RegDateTime = new DateTime(2020, 7, 14, 10, 10, 57, 308, DateTimeKind.Local).AddTicks(3586),
                            SecurityStamp = "68bccbf3-564b-4f50-b58e-def000a99746",
                            TwoFactorEnabled = false,
                            UserName = "dev"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08ff43bb-9777-467a-abe0-42fe895ff87f",
                            Email = "",
                            EmailConfirmed = false,
                            FirstName = "کاربر",
                            LastName = "حسابدار",
                            LockoutEnabled = true,
                            NormalizedEmail = "",
                            NormalizedUserName = "ACCOUNTANT",
                            OrganizationalChartId = (short)1,
                            PasswordHash = "AQAAAAEAACcQAAAAEKAYdENoiu4ygK4V7xueW262vL5ta6fciSNfof79fxkil/A6+11ZVDe3yH0jdn1fWg==",
                            PhoneNumberConfirmed = false,
                            RegDateTime = new DateTime(2020, 7, 14, 10, 10, 57, 311, DateTimeKind.Local).AddTicks(9750),
                            SecurityStamp = "DRM3NPZEDP7P3SYF6QU3RMMOOMHETGLD",
                            TwoFactorEnabled = false,
                            UserName = "accountant"
                        });
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActionName")
                        .HasMaxLength(150);

                    b.Property<string>("ActivityTitle")
                        .HasMaxLength(200);

                    b.Property<string>("ControllerName")
                        .HasMaxLength(150);

                    b.Property<DateTime>("EntryDateTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUser_ActivityLogs");
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUser_UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.OrganizationalChart", b =>
                {
                    b.Property<short>("Id");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser_OrganizationalCharts");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Title = "رئیس"
                        },
                        new
                        {
                            Id = (short)2,
                            Title = "معاون"
                        },
                        new
                        {
                            Id = (short)3,
                            Title = "کارشناس مسئول"
                        },
                        new
                        {
                            Id = (short)4,
                            Title = "کارشناس"
                        });
                });

            modelBuilder.Entity("DomainEntities.BranchAggregate.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BranchHeadId");

                    b.Property<int>("Code");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("BranchHeadId");

                    b.ToTable("Common_Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = 1,
                            Title = "اداره منطقه یک تهران"
                        },
                        new
                        {
                            Id = 2,
                            Code = 2,
                            Title = "اداره منطقه دو تهران"
                        });
                });

            modelBuilder.Entity("DomainEntities.HamrahLoan.HamrahLoanDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Amount");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<int>("FolowNumber");

                    b.Property<int>("HeaderId");

                    b.Property<DateTime>("LoanDate")
                        .HasColumnType("date");

                    b.Property<string>("LoanNumber")
                        .HasMaxLength(30)
                        .IsUnicode(true);

                    b.Property<byte>("Status");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("date");

                    b.Property<int?>("UserChangeStatusId");

                    b.HasKey("Id");

                    b.HasIndex("HeaderId");

                    b.HasIndex("UserChangeStatusId");

                    b.ToTable("HamrahLoanDetail");
                });

            modelBuilder.Entity("DomainEntities.HamrahLoan.HamrahLoanHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<byte>("Status");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<int>("UserCreateId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("UserCreateId");

                    b.ToTable("HamrahLoanHeader");
                });

            modelBuilder.Entity("DomainEntities.NotificationAggregate.Category", b =>
                {
                    b.Property<short>("Id");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Notification_Categories");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Title = "وظیفه ارسالی"
                        },
                        new
                        {
                            Id = (short)2,
                            Title = "تغییر وضعیت وظیفه"
                        },
                        new
                        {
                            Id = (short)3,
                            Title = "موعد انجام وظیفه"
                        },
                        new
                        {
                            Id = (short)4,
                            Title = "موعد انجام تست"
                        });
                });

            modelBuilder.Entity("DomainEntities.NotificationAggregate.NotificationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("CategoryId");

                    b.Property<int>("CreatedByUserId");

                    b.Property<DateTime>("EntryDateTime");

                    b.Property<int>("ForUserId");

                    b.Property<bool>("IsRead");

                    b.Property<bool>("IsSent");

                    b.Property<string>("Text")
                        .HasMaxLength(300);

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedByUserId");

                    b.HasIndex("ForUserId");

                    b.ToTable("NotificationItems");
                });

            modelBuilder.Entity("DomainEntities.ReportAggregate.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessRight");

                    b.Property<string>("ChartOptions");

                    b.Property<string>("ClassName");

                    b.Property<string>("Color");

                    b.Property<string>("Command");

                    b.Property<string>("SeriesName");

                    b.Property<string>("Style");

                    b.Property<string>("Title")
                        .HasMaxLength(100);

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("Report_Charts");
                });

            modelBuilder.Entity("DomainEntities.ReportAggregate.ReportBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessRight")
                        .HasMaxLength(50);

                    b.Property<string>("BoxStatus")
                        .HasMaxLength(100);

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("Icon")
                        .HasMaxLength(50);

                    b.Property<string>("Key")
                        .HasMaxLength(50);

                    b.Property<string>("Link")
                        .HasMaxLength(150);

                    b.Property<string>("SqlCommand")
                        .HasMaxLength(500);

                    b.Property<string>("Title")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Report_Boxes");
                });

            modelBuilder.Entity("DomainEntities.SettingAggregate.Priority", b =>
                {
                    b.Property<short>("Id");

                    b.Property<string>("Title")
                        .HasMaxLength(20)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Common_Priorities");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Title = "ضروری"
                        },
                        new
                        {
                            Id = (short)2,
                            Title = "معمولی"
                        },
                        new
                        {
                            Id = (short)3,
                            Title = "پایین"
                        });
                });

            modelBuilder.Entity("DomainEntities.SettingAggregate.Setting", b =>
                {
                    b.Property<short>("Id");

                    b.Property<string>("EmailPassword")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<short?>("EmailPortNumber");

                    b.Property<string>("EmailSmtpServer")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("EmailUsername")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<bool?>("EnableSsl");

                    b.Property<string>("SmsPassword")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("SmsServiceNumber")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.Property<string>("SmsUserName");

                    b.Property<string>("ThanksMsg");

                    b.Property<string>("WebSiteTitle")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.Property<string>("WelcomeText");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            WebSiteTitle = "سامانه تست نفوذ"
                        });
                });

            modelBuilder.Entity("DomainEntities.TransactionFileAggregate.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BranchHeadId");

                    b.Property<int>("BranchId");

                    b.Property<byte[]>("FileData");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<DateTime>("RegDateTime");

                    b.Property<short?>("StatusId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Transaction_Files");
                });

            modelBuilder.Entity("DomainEntities.TransactionFileAggregate.Status", b =>
                {
                    b.Property<short>("Id");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.ToTable("Transaction_Status");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Title = "ثبت و پردازش شده"
                        },
                        new
                        {
                            Id = (short)2,
                            Title = "ارسال به رئیس شعبه"
                        },
                        new
                        {
                            Id = (short)3,
                            Title = "ارسال به حسابداری"
                        },
                        new
                        {
                            Id = (short)4,
                            Title = "ثبت نهایی"
                        },
                        new
                        {
                            Id = (short)5,
                            Title = "بازگشت به متصدی"
                        },
                        new
                        {
                            Id = (short)6,
                            Title = "بازگشت به رئیس شعبه"
                        });
                });

            modelBuilder.Entity("DomainEntities.TransactionFileDetailAggregate.FileDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal");

                    b.Property<string>("AtmCode")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("CardNumber")
                        .HasMaxLength(16)
                        .IsUnicode(false);

                    b.Property<string>("Date")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<int?>("DocumentCode");

                    b.Property<DateTime?>("DocumentPrintedDate");

                    b.Property<int>("FileId");

                    b.Property<bool>("IsDocumentPrinted");

                    b.Property<bool>("IsRefahi");

                    b.Property<bool>("IsShetabiPrinted");

                    b.Property<string>("Operation")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("ResponseCode");

                    b.Property<DateTime?>("ShetabiPrintedDate");

                    b.Property<short?>("StatusId");

                    b.Property<string>("Time")
                        .HasMaxLength(6)
                        .IsUnicode(false);

                    b.Property<string>("TransactionNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<short?>("TypeId");

                    b.Property<string>("UserDescription")
                        .HasMaxLength(100)
                        .IsUnicode(true);

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TypeId");

                    b.ToTable("Transaction_FileDetails");
                });

            modelBuilder.Entity("DomainEntities.TransactionFileDetailAggregate.Type", b =>
                {
                    b.Property<short>("Id");

                    b.Property<string>("Content")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Extension")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Separation")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("Transaction_Types");

                    b.HasData(
                        new
                        {
                            Id = (short)1,
                            Content = "RETRACTED FAIL",
                            Extension = "log",
                            Separation = "\\n========================================",
                            Title = "grg"
                        },
                        new
                        {
                            Id = (short)2,
                            Content = "RETRACT ACTION FINISHED",
                            Extension = "log",
                            Separation = "\\n========================================",
                            Title = "grg"
                        },
                        new
                        {
                            Id = (short)3,
                            Content = "START RETRACT",
                            Extension = "txt",
                            Separation = "OP.",
                            Title = "hyo"
                        },
                        new
                        {
                            Id = (short)4,
                            Content = "CASH RETRACT",
                            Extension = "jrn",
                            Separation = "OP.",
                            Title = "wincor"
                        });
                });

            modelBuilder.Entity("DomainEntities.WorkfollowAggregate.Workfollow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("FileDetailId");

                    b.Property<short?>("StatusId");

                    b.Property<DateTime>("UpdateDateTime");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("FileDetailId");

                    b.HasIndex("StatusId");

                    b.ToTable("Transaction_Workfollow");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("ApplicationUser_RoleClaims");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_Index",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_GetDetail",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_UpdateProfile",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_AddDetail",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_EditDetail",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_DeleteRows",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_ImpersonateUser",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "Permission",
                            ClaimValue = "Transactions_Index",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "Permission",
                            ClaimValue = "Transactions_All",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "Permission",
                            ClaimValue = "Transactions_UploadFile",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "Permission",
                            ClaimValue = "Transactions_DeleteRows",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "Permission",
                            ClaimValue = "TransactionDetails_Index",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "Permission",
                            ClaimValue = "TransactionDetails_Shetabi",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "Permission",
                            ClaimValue = "TransactionDetails_BranchTransaction",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "Permission",
                            ClaimValue = "TransactionDetails_DeleteRows",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "Permission",
                            ClaimValue = "Setting_Email",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "Permission",
                            ClaimValue = "Setting_Sms",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "Permission",
                            ClaimValue = "Setting_Application",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "Permission",
                            ClaimValue = "Notification_Index",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "Permission",
                            ClaimValue = "Branches_Index",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "Permission",
                            ClaimValue = "Branches_GetDetail",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "Permission",
                            ClaimValue = "Branches_AddDetail",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "Permission",
                            ClaimValue = "Branches_EditDetail",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "Permission",
                            ClaimValue = "Branches_DeleteRows",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "Permission",
                            ClaimValue = "AccessRights_Index",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "Permission",
                            ClaimValue = "AccessRights_AddDetail",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "Permission",
                            ClaimValue = "AccessRights_GetDetail",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "Permission",
                            ClaimValue = "AccessRights_EditDetail",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "Permission",
                            ClaimValue = "AccessRights_DeleteRows",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_Index",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_GetDetail",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_AddDetail",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_EditDetail",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_DeleteRows",
                            RoleId = 3
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "Permission",
                            ClaimValue = "TransactionDetails_Index",
                            RoleId = 4
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "Permission",
                            ClaimValue = "Transactions_Index",
                            RoleId = 5
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "Permission",
                            ClaimValue = "Transactions_UploadFile",
                            RoleId = 5
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "Permission",
                            ClaimValue = "Transactions_DeleteRows",
                            RoleId = 5
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "Permission",
                            ClaimValue = "TransactionDetails_Index",
                            RoleId = 5
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_Index",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_GetDetail",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_AddDetail",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_EditDetail",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_DeleteRows",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "Permission",
                            ClaimValue = "UserManagement_ImpersonateUser",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "Permission",
                            ClaimValue = "Transactions_All",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "Permission",
                            ClaimValue = "TransactionDetails_Shetabi",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "Permission",
                            ClaimValue = "TransactionDetails_BranchTransaction",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 49,
                            ClaimType = "Permission",
                            ClaimValue = "Branches_Index",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 50,
                            ClaimType = "Permission",
                            ClaimValue = "Branches_GetDetail",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 51,
                            ClaimType = "Permission",
                            ClaimValue = "Branches_AddDetail",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 52,
                            ClaimType = "Permission",
                            ClaimValue = "Branches_EditDetail",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 53,
                            ClaimType = "Permission",
                            ClaimValue = "Branches_DeleteRows",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUser_Claims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicationUser_Logins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("ApplicationUser_Tokens");
                });

            modelBuilder.Entity("DomainEntities.ATMUnknownTransactionsAggregate.ATMUnknownTransactions", b =>
                {
                    b.HasOne("DomainEntities.TransactionFileAggregate.Status", "StatusWorkfollow")
                        .WithMany()
                        .HasForeignKey("StatusWorkfollowId");
                });

            modelBuilder.Entity("DomainEntities.ATMUnknownTransactionsAggregate.WorkfollowATMUnknownTransactions", b =>
                {
                    b.HasOne("DomainEntities.ATMUnknownTransactionsAggregate.ATMUnknownTransactions", "ATMUnknownTransactions")
                        .WithMany("Workfollows")
                        .HasForeignKey("ATMUnknownTransactionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.TransactionFileAggregate.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("DomainEntities.AccountAggregate.Account", b =>
                {
                    b.HasOne("DomainEntities.BranchAggregate.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUser", b =>
                {
                    b.HasOne("DomainEntities.BranchAggregate.Branch", "BranchHead")
                        .WithMany()
                        .HasForeignKey("BranchHeadId");

                    b.HasOne("DomainEntities.BranchAggregate.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "RegisterByUser")
                        .WithMany()
                        .HasForeignKey("RegisterByUserId");
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUserActivity", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.ApplicationUserAggregate.ApplicationUserRole", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationRole", "ApplicationRole")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "ApplicationUser")
                        .WithMany("ApplicationUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.BranchAggregate.Branch", b =>
                {
                    b.HasOne("DomainEntities.BranchAggregate.Branch", "BranchHead")
                        .WithMany("SubBranches")
                        .HasForeignKey("BranchHeadId");
                });

            modelBuilder.Entity("DomainEntities.HamrahLoan.HamrahLoanDetail", b =>
                {
                    b.HasOne("DomainEntities.HamrahLoan.HamrahLoanHeader", "Header")
                        .WithMany("Details")
                        .HasForeignKey("HeaderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "UserChangeStatus")
                        .WithMany()
                        .HasForeignKey("UserChangeStatusId");
                });

            modelBuilder.Entity("DomainEntities.HamrahLoan.HamrahLoanHeader", b =>
                {
                    b.HasOne("DomainEntities.BranchAggregate.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "UserCreate")
                        .WithMany()
                        .HasForeignKey("UserCreateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.NotificationAggregate.NotificationItem", b =>
                {
                    b.HasOne("DomainEntities.NotificationAggregate.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "ForUser")
                        .WithMany()
                        .HasForeignKey("ForUserId");
                });

            modelBuilder.Entity("DomainEntities.TransactionFileAggregate.File", b =>
                {
                    b.HasOne("DomainEntities.BranchAggregate.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.TransactionFileAggregate.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DomainEntities.TransactionFileDetailAggregate.FileDetail", b =>
                {
                    b.HasOne("DomainEntities.TransactionFileAggregate.File", "File")
                        .WithMany("FileDetails")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.TransactionFileAggregate.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("DomainEntities.TransactionFileDetailAggregate.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId");
                });

            modelBuilder.Entity("DomainEntities.WorkfollowAggregate.Workfollow", b =>
                {
                    b.HasOne("DomainEntities.TransactionFileDetailAggregate.FileDetail", "FileDetail")
                        .WithMany("Workfollows")
                        .HasForeignKey("FileDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DomainEntities.TransactionFileAggregate.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DomainEntities.ApplicationUserAggregate.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
